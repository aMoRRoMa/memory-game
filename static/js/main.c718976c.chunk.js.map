{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CELLS","Array","fill","reduce","memo","_","index","id","type","isOpen","Cell","toggleHandler","block","className","onClick","Game","initialState","cells","openedCell","blockCells","useState","setState","startNewGame","toggleCells","ids","withBlock","isFinish","Object","keys","length","values","map","cell","key","newCells","newOpenedCell","newBlockCells","checkingId","checkingType","currentId","checkCell","disabled","isDirty","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4zBAIA,IACMA,EAAQ,IAAIC,MADE,IACiBC,KAAK,GAAGC,QAC3C,SAACC,EAAMC,EAAGC,GAAV,YACKF,EADL,eAEGE,EAAQ,CACPC,GAAID,EACJE,MAAOF,EAAQ,GAAK,EAAI,EAAI,MAAQ,QACpCG,QAAQ,OAGZ,IAGIC,EAAO,SAAC,GAAD,IAAGH,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAQE,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,MAApC,OACX,yBACEC,UAAS,eAAUL,EAAV,YAAkBC,EAAS,OAAS,IAC7CK,QAAS,kBAAOF,GAASD,EAAcJ,OAIrCQ,EAAO,WACX,IAAMC,EAAe,CAAEC,MAAOjB,EAAOkB,WAAY,KAAMC,WAAY,IADlD,EAEqCC,mBAASJ,GAF9C,0BAERC,EAFQ,EAERA,MAAOC,EAFC,EAEDA,WAAYC,EAFX,EAEWA,WAAcE,EAFzB,KAGXC,EAAe,kBAAMD,EAASL,IAE9BO,EAAc,SAACC,EAAKP,GAAN,IAAaQ,EAAb,oEACfR,EADe,GAEfO,EAAIrB,QACL,SAACC,EAAMG,GAAP,YACKH,EADL,eAEGG,EAFH,KAGOU,EAAMV,GAHb,CAIIE,QAASQ,EAAMV,GAAIE,OACnBG,MAAOa,QAGX,MAmCEC,EAAW,SAAAP,GAAU,OAvET,KAuEaQ,OAAOC,KAAKT,GAAYU,QAGvD,OACE,kBAAC,WAAD,KACE,yBAAKhB,UAAU,QACZc,OAAOG,OAAOb,GAAOc,KAAI,SAAAC,GAAI,OAC5B,kBAAC,EAAD,eACEC,IAAKD,EAAKzB,IACNyB,EAFN,CAGEpB,QAASO,EAAWa,EAAKzB,IACzBI,cAAe,SAACJ,GAAD,OA1CP,SAACA,EAAIW,EAAYC,EAAYF,GAC7C,IAAIiB,EAAUC,EAAeC,EAAgBjB,EADU,EAGRF,EAAMV,GAAzC8B,EAH2C,EAG/C9B,GAAsB+B,EAHyB,EAG/B9B,KACxB,GAAmB,OAAfU,EACF,GAAIA,IAAemB,EACjBH,EAAWX,EAAY,CAACc,GAAapB,GACrCkB,EAAgB,SACX,CAAC,IAE4B,EAF7B,EACwClB,EAAMC,GAAvCqB,EADP,EACGhC,GACR,GAFK,EACkBC,OACH8B,EAClBJ,EAAWX,EAAY,CAACc,GAAapB,GAAO,GAC5CkB,EAAgB,KAChBC,EAAa,KAAQjB,GAAR,mBAAqBkB,GAAa,GAAlC,cAAyCE,GAAY,GAArD,SAEbL,EAAWX,EAAY,CAACgB,GAAYtB,GACpCkB,EAAgB,UAIpBD,EAAWX,EAAY,CAACc,GAAapB,GACrCkB,EAAgBE,EAGlBhB,EAAS,CACPJ,MAAOiB,EACPhB,WAAYiB,EACZhB,WAAYiB,IAeiBI,CAAUjC,EAAIW,EAAYC,EAAYF,WAInE,yBAAKJ,UAAU,WACb,4BAAQC,QAASQ,EAAcmB,UAAWf,EAASP,IAAnD,YACA,4BAAQL,QAASQ,EAAcmB,UAhBrB,SAAAtB,GAAU,OAAIQ,OAAOC,KAAKT,GAAYU,OAAS,EAgBfa,CAAQvB,IAAeO,EAASP,IAA1E,YAcOwB,EARH,WACV,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,QCzFc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c718976c.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport './App.css';\n\n\nconst CELLS_COUNT = 16;\nconst CELLS = new Array(CELLS_COUNT).fill(0).reduce(\n  (memo, _, index) => ({\n    ...memo,\n    [index]: {\n      id: index,\n      type: (index + 1) % 2 > 0 ? 'red' : 'black',\n      isOpen: false,\n    },\n  }),\n  {},\n);\n\nconst Cell = ({ id, type, isOpen, toggleHandler, block }) => (\n  <div\n    className={`Cell ${type} ${isOpen ? 'open' : ''}`}\n    onClick={() => !block && toggleHandler(id)}\n  />\n);\n\nconst Game = () => {\n  const initialState = { cells: CELLS, openedCell: null, blockCells: {} };\n  const [{ cells, openedCell, blockCells }, setState] = useState(initialState);\n  const startNewGame = () => setState(initialState);\n  \n  const toggleCells = (ids, cells, withBlock = false) => ({\n    ...cells,\n    ...ids.reduce(\n      (memo, id) => ({\n        ...memo,\n        [id]: {\n          ...cells[id],\n          isOpen: !cells[id].isOpen,\n          block: withBlock\n        },\n      }),\n      {},\n    ),\n  });\n  \n  const checkCell = (id, openedCell, blockCells, cells) => {\n    let newCells, newOpenedCell, newBlockCells = blockCells;\n\n    const { id: checkingId, type: checkingType } = cells[id];\n    if (openedCell !== null) {\n      if (openedCell === checkingId) {\n        newCells = toggleCells([checkingId], cells);\n        newOpenedCell = null\n      } else {\n        const { id: currentId, type: currentType } = cells[openedCell];\n        if (currentType === checkingType) {\n          newCells = toggleCells([checkingId], cells, true);\n          newOpenedCell = null;\n          newBlockCells = { ...blockCells, [checkingId]: true, [currentId]: true }\n        } else {\n          newCells = toggleCells([currentId], cells);\n          newOpenedCell = null;\n        }\n      }\n    } else {\n      newCells = toggleCells([checkingId], cells);\n      newOpenedCell = checkingId;\n    }\n    \n    setState({\n      cells: newCells,\n      openedCell: newOpenedCell,\n      blockCells: newBlockCells,\n    });\n  };\n  \n  const isFinish = blockCells => Object.keys(blockCells).length === CELLS_COUNT;\n  const isDirty = blockCells => Object.keys(blockCells).length > 0;\n  \n  return (\n    <Fragment>\n      <div className=\"Game\">\n        {Object.values(cells).map(cell => (\n          <Cell\n            key={cell.id}\n            {...cell}\n            block={!!blockCells[cell.id]}\n            toggleHandler={(id) => checkCell(id, openedCell, blockCells, cells)}\n          />)\n        )}\n      </div>\n      <div className=\"Actions\">\n        <button onClick={startNewGame} disabled={!isFinish(blockCells)}>New game</button>\n        <button onClick={startNewGame} disabled={!isDirty(blockCells) || isFinish(blockCells)}>Clear</button>\n      </div>\n    </Fragment>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}