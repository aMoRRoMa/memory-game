{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CELLS","Array","fill","reduce","memo","_","index","id","type","toggleCells","ids","prev","next","forEach","has","delete","add","isFinish","blockCells","size","Cell","isOpen","onClick","className","Game","initialState","cells","checkCell","openedCells","Set","useState","state","setState","startNewGame","Object","values","map","cell","key","isBlock","newCheckCell","newOpenedCells","newBlockCells","checkingId","checkingType","currentId","updateBlockCells","checkingCell","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32a95fb0.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport './App.css';\n\n\nconst CELLS_COUNT = 16;\nconst CELLS = new Array(CELLS_COUNT).fill(0).reduce(\n  (memo, _, index) => ({\n    ...memo,\n    [index]: {\n      id: index,\n      type: (index + 1) % 2 > 0 ? 'red' : 'black',\n    },\n  }),\n  {},\n);\n\nconst toggleCells = (ids, prev) => {\n  const next = prev;\n  ids.forEach(\n    (id) => {\n      next.has(id) ? next.delete(id) : next.add(id);\n    }\n  );\n  return next;\n};\n\nconst updateBlockCells = (ids, prev) => {\n  const next = prev;\n  ids.forEach(\n    (id) => {\n      next.add(id);\n    }\n  );\n  return next;\n};\n\nconst isOpen = (id, { openedCells }) => openedCells.has(id);\nconst isBlock = (id, { blockCells }) => blockCells.has(id);\nconst isFinish = ({ blockCells }) => blockCells.size === CELLS_COUNT;\nconst isDirty = ({ blockCells }) => blockCells.size > 0;\n\nconst checkingCell = (id, { checkCell, openedCells, blockCells, cells }, setState) => {\n  let newCheckCell, newOpenedCells, newBlockCells = blockCells;\n  \n  const { id: checkingId, type: checkingType } = cells[id];\n  if (checkCell !== null) {\n    if (checkCell === checkingId) {\n      newOpenedCells = toggleCells([checkingId], openedCells);\n      newCheckCell = null\n    } else {\n      const { id: currentId, type: currentType } = cells[checkCell];\n      if (currentType === checkingType) {\n        newOpenedCells = toggleCells([checkingId], openedCells);\n        newCheckCell = null;\n        newBlockCells = updateBlockCells([checkingId, currentId], blockCells)\n      } else {\n        newOpenedCells = toggleCells([currentId], openedCells);\n        newCheckCell = null;\n      }\n    }\n  } else {\n    newOpenedCells = toggleCells([checkingId], openedCells);\n    newCheckCell = checkingId;\n  }\n  \n  setState({\n    cells,\n    checkCell: newCheckCell,\n    openedCells: newOpenedCells,\n    blockCells: newBlockCells,\n  });\n};\n\nconst Cell = ({ id, type, isOpen, onClick }) => (\n  <div\n    className={`Cell ${type} ${isOpen ? 'open' : ''}`}\n    onClick={() => onClick(id)}\n  />\n);\n\nconst Game = () => {\n  const initialState = {\n    cells: CELLS,\n    checkCell: null,\n    openedCells: new Set(),\n    blockCells: new Set()\n  };\n  \n  const [state, setState] = useState(initialState);\n  const startNewGame = () => setState(initialState);\n  \n  const { cells } = state;\n  return (\n    <Fragment>\n      <div className=\"Game\">\n        {Object.values(cells).map(cell => (\n          <Cell\n            key={cell.id}\n            {...cell}\n            isOpen={isOpen(cell.id, state)}\n            onClick={id => !isBlock(id, state) && checkingCell(id, state, setState)}\n          />)\n        )}\n      </div>\n      <div className=\"Actions\">\n        <button onClick={startNewGame} disabled={!isFinish(state)}>New game</button>\n        <button onClick={startNewGame} disabled={!isDirty(state) || isFinish(state)}>Clear</button>\n      </div>\n    </Fragment>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}